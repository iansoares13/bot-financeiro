import os
import openai
from flask import Flask, request
import requests
import json
from datetime import datetime

app = Flask(__name__)

# Configura√ß√µes
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
client = openai.OpenAI(api_key=OPENAI_API_KEY)

# Banco tempor√°rio para armazenar os JSONs por chat_id
dados_temp = {}

# Enviar mensagem para o Telegram
def enviar_mensagem_telegram(chat_id, texto, botoes=None):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {"chat_id": chat_id, "text": texto, "parse_mode": "Markdown"}
    if botoes:
        payload["reply_markup"] = {
            "inline_keyboard": [[{"text": btn, "callback_data": btn} for btn in botoes]]
        }
    requests.post(url, json=payload)

# Rota principal
@app.route("/", methods=["POST"])
def receber_mensagem():
    data = request.get_json()
    if "message" in data:
        chat_id = data["message"]["chat"]["id"]
        texto_usuario = data["message"].get("text", "")

        if chat_id in dados_temp:
            json_antigo = dados_temp[chat_id]
            resposta = consultar_gpt_corrigido(json_antigo, texto_usuario)
        else:
            resposta = consultar_gpt(texto_usuario)

        if not resposta:
            enviar_mensagem_telegram(chat_id, "Houve um erro ao processar sua mensagem.")
            return "OK"

        if resposta.get("faltando"):
            dados_temp[chat_id] = resposta
            faltam = ", ".join(resposta["faltando"])
            enviar_mensagem_telegram(chat_id, f"Faltam as seguintes informa√ß√µes: {faltam}. Por favor, envie apenas essas informa√ß√µes.")
        else:
            dados_temp[chat_id] = resposta
            resumo = (
                f"Resumo do lan√ßamento:\n"
                f"üìÖ *Data:* {resposta['data']}\n"
                f"üí∏ *Tipo:* {resposta['tipo']}\n"
                f"R$ *Valor:* {resposta['valor']}\n"
                f"üí≥ *Pagamento:* {resposta['forma_pagamento']}\n"
                f"üìÇ *Categoria:* {resposta['categoria']} > {resposta['subcategoria']}\n"
                f"üìù *Descri√ß√£o:* {resposta['descricao']}"
            )
            enviar_mensagem_telegram(chat_id, resumo, botoes=["‚úÖ Confirmar Lan√ßamento", "‚ùå Corrigir"])

    elif "callback_query" in data:
        chat_id = data["callback_query"]["message"]["chat"]["id"]
        resposta = data["callback_query"]["data"]
        if "Confirmar" in resposta:
            enviar_mensagem_telegram(chat_id, "‚úÖ Lan√ßamento confirmado!")
            dados_temp.pop(chat_id, None)
        elif "Corrigir" in resposta:
            enviar_mensagem_telegram(chat_id, "‚úèÔ∏è Ok! Envie apenas o que deseja corrigir.")
    
    return "OK"

# GPT - NOVO LAN√áAMENTO
def consultar_gpt(frase):
    prompt = gerar_prompt(frase)
    try:
        resposta = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.3
        )
        conteudo = resposta.choices[0].message.content
        return json.loads(conteudo)
    except Exception as e:
        print(f"[ERRO] GPT: {e}")
        return None

# GPT - CORRE√á√ÉO
def consultar_gpt_corrigido(json_antigo, frase_corrigida):
    prompt = f"""Voc√™ √© um interpretador financeiro inteligente. 
Voc√™ receber√° um JSON anterior e uma frase complementar. Atualize o JSON, mantendo tudo o que n√£o foi alterado. 
Se a frase corrigir ou adicionar alguma informa√ß√£o, ajuste os campos correspondentes mantendo os demais.

Formato da data: DD/MM/AAAA

JSON anterior:
{json.dumps(json_antigo, ensure_ascii=False, indent=2)}

Frase: {frase_corrigida}
"""
    try:
        resposta = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.3
        )
        conteudo = resposta.choices[0].message.content
        return json.loads(conteudo)
    except Exception as e:
        print(f"[ERRO CORRE√á√ÉO] GPT: {e}")
        return None

# Prompt original estruturado
def gerar_prompt(frase):
    return f"""Voc√™ √© um interpretador financeiro inteligente. Analise a seguinte frase em linguagem natural e retorne um JSON com os seguintes campos, nesta ordem:

1. data (formato: "DD/MM/AAAA")
2. tipo (valores poss√≠veis: "Receita", "Despesa" ou "Investimentos")
3. valor (como n√∫mero decimal com v√≠rgula, ex: 150,75)
4. forma_pagamento (valores poss√≠veis: "Pix", "Cr√©dito", "D√©bito", "Flash", "Dinheiro", "Outro")
5. categoria (usar apenas as categorias da lista fornecida abaixo)
6. subcategoria (usar apenas as subcategorias da respectiva categoria)
7. descricao (curta e clara, com base na frase original)

Se alguma informa√ß√£o obrigat√≥ria estiver ausente, adicione no JSON um campo extra chamado "faltando", com uma lista dos nomes dos campos ausentes.

Use somente as seguintes categorias e subcategorias:

Receitas:
- Sal√°rio
- Flash / VA / VR
- Di√°rias de Viagem (LINCE)
- Reembolso de Viagem (LINCE)
- Transfer√™ncias / Pix de Outros
- Outros

Despesas:
- Moradia
  - Aluguel / Financiamento
  - Condom√≠nio
  - IPTU
  - Luz
  - √Ågua
  - G√°s
  - Telefone Celular
  - Internet
  - Servi√ßos / Manuten√ß√£o
  - Itens para Casa
  - Seguro Residencial
  - Outros
- Transporte
  - Seguro
  - IPVA
  - Combust√≠vel
  - Metr√¥ / √înibus
  - Uber / 99
  - Estacionamento
  - Ped√°gio
  - Manuten√ß√£o / Revis√£o
  - Limpeza
  - Outros
- Alimenta√ß√£o
  - Mercado / Padaria
  - Restaurante
  - Ifood
  - Outros
- Sa√∫de
  - Farm√°cia
  - Plano de Sa√∫de
  - Academia / Esportes
  - Consultas / Exames
  - Psic√≥logo / Terapia
  - Suplementos
  - Dentista Particular
  - Outros
- Pets
  - Plano de Sa√∫de Pets
  - Ra√ß√£o
  - Areia Higi√™nica
  - Brinquedos / Utens√≠lios
  - Consultas / Exames / Vacinas
  - Outros
- Cuidados Pessoais
  - Barbeiro / Sal√£o
  - Roupa / T√™nis / Acess√≥rios
  - Outros
- Lazer
  - Ingressos (Cinema / Shows / Festas / Jogos)
  - Viagens / Turismo
  - Outros
- Assinaturas
  - Netflix
  - Amazon Prime Video
  - Disney+
  - Globoplay + Premier
  - Max
  - Paramount+
  - NBA League Pass
  - Ifood Clube
  - Livelo
  - Azul
  - Smiles
  - Wine
  - Chatgpt
  - Mantiqueira (Ovos)
  - Outros
- Aleat√≥rios
  - Presentes
  - Outros

Investimentos:
- Dep√≥sitos Mensais
  - Fundo de Emerg√™ncia
  - Fundos Imobili√°rios / A√ß√µes
  - Op√ß√µes
  - Renda Fixa
  - Planos com Moz√£o

Regras:
- Nunca invente novas categorias. Nunca invente novas subcategorias.
- Se n√£o conseguir classificar com precis√£o a subcategoria, use "Outros" da categoria correspondente.
- Se n√£o conseguir classificar nenhuma categoria, use a categoria "Aleat√≥rios".
- Se a frase contiver ‚Äúontem‚Äù, ‚Äúhoje‚Äù ou datas como ‚Äúdia 02/04‚Äù, converta isso para o formato ‚ÄúDD/MM/AAAA‚Äù.
- Se a data estiver ausente, use a data atual.
- Sempre retorne os campos no idioma portugu√™s, mesmo que a frase esteja em ingl√™s.
- "Flash" √© o nome do cart√£o do Vale Alimenta√ß√£o que recebemos. Ent√£o podemos ter recebido o saldo depositado no flash como receita, ou tamb√©m podemos utilizar ele para pagar comida no mercado ou restaurante. Se atente se √© receita ou despesa.
- A resposta deve ser um JSON puro, sem explica√ß√µes ou coment√°rios.

Frase: {frase}
Data atual: {data_hoje}
"""

# Iniciar app Flask
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)
